import type { NavigationGuardNext, RouteLocationNormalized } from 'vue-router';
import { useAuthStore } from 'src/stores/auth';

export const requireAuth = async (
  to: RouteLocationNormalized,
  from: RouteLocationNormalized,
  next: NavigationGuardNext,
): Promise<void> => {
  const authStore = useAuthStore();

  if (!authStore.isAuthenticated) {
    await authStore.validateToken();
  }

  if (authStore.isAuthenticated) {
    next();
  } else {
    next({
      path: '/',
      query: { redirect: to.fullPath },
    });
  }
};

export const requireGuest = async (
  to: RouteLocationNormalized,
  from: RouteLocationNormalized,
  next: NavigationGuardNext,
): Promise<void> => {
  const authStore = useAuthStore();

  if (!authStore.isAuthenticated) {
    await authStore.validateToken();
  }

  if (authStore.isAuthenticated) {
    next('/dashboard');
  } else {
    next();
  }
};

export const requireAdmin = async (
  to: RouteLocationNormalized,
  from: RouteLocationNormalized,
  next: NavigationGuardNext,
): Promise<void> => {
  const authStore = useAuthStore();

  // Se não tem token nem usuário no localStorage, redireciona imediatamente
  const hasToken = localStorage.getItem('smartpicks_token');
  const hasUser = localStorage.getItem('smartpicks_user');

  if (!hasToken && !hasUser) {
    next({
      path: '/',
      query: { redirect: to.fullPath },
    });
    return;
  }

  // Se não está autenticado na store, tenta validar
  if (!authStore.isAuthenticated) {
    try {
      const isValid = await authStore.validateToken();
      if (!isValid) {
        next({
          path: '/',
          query: { redirect: to.fullPath },
        });
        return;
      }
    } catch (error) {
      // Falha na validação, redireciona para login
      next({
        path: '/',
        query: { redirect: to.fullPath },
      });
      return;
    }
  }

  // Verifica se é admin
  if (authStore.isAuthenticated && authStore.user?.perfil === 'admin') {
    next();
  } else if (authStore.isAuthenticated) {
    // Usuário logado mas não é admin
    next('/acesso-negado');
  } else {
    // Não autenticado
    next({
      path: '/',
      query: { redirect: to.fullPath },
    });
  }
};

export const initializeAuth = async (
  to: RouteLocationNormalized,
  from: RouteLocationNormalized,
  next: NavigationGuardNext,
): Promise<void> => {
  const authStore = useAuthStore();

  if (!authStore.isAuthenticated) {
    try {
      await authStore.initialize();
    } catch (error) {
      console.error('Erro na inicialização da autenticação:', error);
    }
  }

  next();
};
